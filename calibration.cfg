

[homing_override]
gcode:
   {% if not 'Z' in params and not 'Y' in params and 'X' in params %}
     G28 X
     G0 X348 F1200
   {% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
     G28 Y
     G0 Y360  F1200
   {% elif not 'Z' in params and 'X' in params and 'Y' in params %}
     G28 Y
     G0 Y360  F1200
     G4 P2000
     G28 X
     G0 X348  F1200
   {% elif 'Z' in params and not 'X' in params and not 'Y' in params %}
     G90
     G0  X191 Y165 F3600
     G28 Z
     G0  Z10 F600
   {% else %}
     G90
     G0 Z5 F300
     G28 Y
     G0 Y360  F1200
     G4 P2000
     G28 X
     G0 X348  F1200
     G90
     G0  X191 Y165 F3600
     G28 Z
     G0  Z10 F600
   {% endif %}
axes: xyz
set_position_z: 0



[gcode_macro _CALIBRATION_ZOFFSET]
description: Calibrates the Z-offset by heating the bed and extruder, leveling the gantry, and running Z-offset calibration.
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}

    {% set bed_temp      = params.BED_TEMP|default(printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|default(60))|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(printer['gcode_macro _global_var'].load_filament_extruder_temp|default(200))|int %}
    {% set preheat_temp  = printer['gcode_macro _global_var'].preheat_temp|default(140)|int %}
    {% set soak_time     = params.SOAK_TIME|default(45000)|int %}
    {% if soak_time < 1000 %}
        {% set soak_time = 1000 %}
    {% endif %}

    LCD_YELLOW
    M117 CALIBRATE Z-OFFSET
    G28
    M104 S{preheat_temp}
    QUAD_GANTRY_LEVEL
    M117 SOAK FOR ZOFFSET
    M104 S{preheat_temp}

    # ---- RAISE-ONLY bed temp guard (never cool down) ----
    {% set current_target = printer.heater_bed.target|default(0)|int %}
    {% set current_temp   = printer.heater_bed.temperature|int %}
    {% set wanted         = [bed_temp, current_target, current_temp]|max %}
    {% if wanted > current_target %}
        M140 S{wanted}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={wanted}
    {% endif %}
    # -----------------------------------------------------

    LCD_YELLOW
    G4 P{soak_time}
    M104 S{extruder_temp}
    CLEAN_NOZZLE
    G1 Z5.0
    LCD_YELLOW
    M117 CALIBRATING Z
    M104 S{preheat_temp}
    G4 P300
    Z_OFFSET_CALIBRATION
    Z_OFFSET_APPLY_PROBE
    BEEP
    GET_Z_OFFSET


[gcode_macro GET_Z_OFFSET]
description: Displays the current Z-offset value on the LCD and console, or indicates if unavailable.
gcode:
    {% if 'configfile' in printer and 'settings' in printer.configfile and 'probe' in printer.configfile.settings and 'z_offset' in printer.configfile.settings.probe %}
        {% set z_height = printer.configfile.settings.probe.z_offset|float|round(3) %}
        {action_respond_info("Z-Offset: %s" % z_height)}
        M117 Z-OFFSET: {z_height}
    {% else %}
        {action_respond_info("Z-Offset: Not found. Ensure probe is configured and calibration completed.")}
        M117 Z-OFFSET UNAVAILABLE
        LCD_YELLOW
    {% endif %}

[delayed_gcode _auto_zoffset]
gcode:
    SAVE_VARIABLE VARIABLE=offsetadjust VALUE={'%05.2f' % (0)}
    _CALIBRATION_ZOFFSET
    GET_Z_OFFSET PREFIX="Z-Offset Before Test Print: "
    LCD_YELLOW
    M117 TEST PRINT Z
    G1 Z3.0
    CHECK_FILAMENT_SENSOR
    M23 /.zoffset_test.gcode
    M24
    GET_Z_OFFSET PREFIX="Z-Offset After Test Print: "
    {action_respond_info("Z-Offset: Wait for z-offset storing in printer.cfg and automatic reboot.")}
    BEEP

[gcode_macro _Delay_Calibrate]
description: Triggers the _auto_zoffset macro to start Z-offset calibration with a 1-second delay.
gcode:
    UPDATE_DELAYED_GCODE ID=_auto_zoffset DURATION=1.0

[gcode_macro DISPLAY_Z_OFFSET]
description: Z-offset on the LCD if too high (= nozzle too low) and logs to console, changes LED color red (warning)
gcode:
    {% if 'configfile' in printer and 'settings' in printer.configfile and 'probe' in printer.configfile.settings and 'z_offset' in printer.configfile.settings.probe %}
        {% set z_height = printer.configfile.settings.probe.z_offset|float|round(3) %}
        {% if z_height >= 2.000 %}
            {action_respond_info("Warning: Z-Offset value may scratch the nozzle on the bed! Nozzle possibly too low. Calibrate Z-Offset!\nZ-Offset: %s" % z_height)}
            M117 Z-OFFSET: {z_height}
            LCD_RED
        {% else %}
            {action_respond_info("Z-Offset: %s" % z_height)}
            LCD_GREEN
        {% endif %}
    {% else %}
        {action_respond_info("Z-Offset: not found")}
        M117 Z-OFFSET NOT FOUND
        LCD_GREEN
    {% endif %}

[delayed_gcode SHOW_Z_OFFSET_ON_STARTUP]
initial_duration: 30.0
gcode:
    DISPLAY_Z_OFFSET

[delayed_gcode TEST_BELT]
initial_duration: 0.3
gcode:
    {% set x_freq = printer.save_variables.variables.x_freq|float %}
    {% set y_freq = printer.save_variables.variables.y_freq|float %}
    {% set show_freq = printer.save_variables.variables.show_freq %}
    {% if show_freq == 1 %}
        M117 x {x_freq}, y {y_freq}
        SAVE_VARIABLE VARIABLE=show_freq VALUE=0
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
description: Performs quad gantry leveling with raise-only bed temp guard and Z re-home.
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}

    LCD_YELLOW
    M104 S{printer['gcode_macro _global_var'].preheat_temp}  # soften any blobs

    # ---- RAISE-ONLY bed temp guard (never cool down) ----
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target      = printer.heater_bed.target|default(0)|int %}
    {% set current_temp        = printer.heater_bed.temperature|int %}
    {% set wanted              = [mesh_calibrate_temp, current_target, current_temp]|max %}
    {action_respond_info("QGL raise-only: wanted=%d, target=%d, temp=%d" % (wanted, current_target, current_temp))}
    {% if wanted > current_target %}
        M140 S{wanted}   # only raise setpoint; do NOT wait
    {% endif %}
    # -----------------------------------------------------

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G4 P2000
        G28
    {% endif %}

    M117 QUAD GANTRYLEVEL
    QUAD_GANTRY_LEVEL_BASE
    G4 P2000
    G28 Z

    # If we began "cold" (no prior target), restore heaters to off after QGL.
    {% if current_target == 0 %}
        M104 S0
        M140 S0
    {% endif %}


[gcode_macro PROBE_CALIBRATE]
description: Calibrates the probe's Z-offset with bed raise-only preheating and homing.
rename_existing: PROBE_CALIBRATE_BASE
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}

    M104 S{printer['gcode_macro _global_var'].preheat_temp}  # soften nozzle residue

    {% set current_target        = printer.heater_bed.target|default(0)|int %}
    {% set current_temp          = printer.heater_bed.temperature|int %}
    {% set z_offset_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set wanted                = [z_offset_calibrate_temp, current_target, current_temp]|max %}

    {action_respond_info("PROBE_CALIBRATE raise-only: wanted=%d, target=%d, temp=%d" % (wanted, current_target, current_temp))}
    {% if wanted > current_target %}
        M140 S{wanted}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={wanted}
    {% endif %}

    LCD_YELLOW
    M117 PROBE CALIBRATE
    G4 P2000
    G28
    PROBE_CALIBRATE_BASE
    TESTZ z=-4


[gcode_macro BED_MESH_CALIBRATE]
description: Creates a bed mesh profile with adaptive probing and raise-only preheating
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}

    LCD_YELLOW
    M117 BED MESH AREA
    M104 S{printer['gcode_macro _global_var'].preheat_temp}  # soften nozzle residue

    # ---- RAISE-ONLY bed temp guard (never cool down) ----
    {% set base_mesh_temp   = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target   = printer.heater_bed.target|default(0)|int %}
    {% set current_temp     = printer.heater_bed.temperature|int %}
    {% set requested_temp   = params.BED_TEMP|default(base_mesh_temp)|int %}
    {% set wanted           = [base_mesh_temp, requested_temp, current_target, current_temp]|max %}
    {action_respond_info("BED_MESH raise-only: wanted=%d, target=%d, temp=%d" % (wanted, current_target, current_temp))}
    {% if wanted > current_target %}
        M140 S{wanted}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={wanted}
    {% endif %}
    # -----------------------------------------------------

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G4 P2000
        G28
    {% endif %}

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE_BASE ADAPTIVE=1

    # If we began "cold" (no prior target), restore heaters to off after mesh.
    {% if current_target == 0 %}
        M140 S0
    {% endif %}





[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default


[gcode_macro Z_COMPARE_BUTTON_TO_CENTER]
description: Probe BUTTON then CENTER; report Z and delta (center - button)
# Defaults:
variable_button_xy: "307,352"
variable_center_xy: "175,175"
# Scratch:
variable_btn_z: 0.0
variable_ctr_z: 0.0

gcode:
    {% set btn_raw = (params.BUTTON|default(printer["gcode_macro Z_COMPARE_BUTTON_TO_CENTER"].button_xy))|string %}
    {% set ctr_raw = (params.CENTER|default(printer["gcode_macro Z_COMPARE_BUTTON_TO_CENTER"].center_xy))|string %}
    {% set btn_s = btn_raw|replace("[","")|replace("]","")|replace(" ","") %}
    {% set ctr_s = ctr_raw|replace("[","")|replace("]","")|replace(" ","") %}
    {% set exy = btn_s.split(",") %}
    {% set cxy = ctr_s.split(",") %}
    {% set px = (exy[0]|float) if exy|length>0 else 0.0 %}
    {% set py = (exy[1]|float) if exy|length>1 else 0.0 %}
    {% set cx = (cxy[0]|float) if cxy|length>0 else 0.0 %}
    {% set cy = (cxy[1]|float) if cxy|length>1 else 0.0 %}
    {% set zh = 10.0 %}
    {% set zs = 15.0 * 60 %}
    {% set slowz = 1.0 * 60 %}   # 1 mm/s probing approach

    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}
    {% if "z" not in printer.toolhead.homed_axes %}
        {action_raise_error("Z not homed. Run G28 Z first, then rerun.")}
    {% endif %}
    {% if (px == 0.0 and py == 0.0) or (cx == 0.0 and cy == 0.0) %}
        {action_raise_error("Bad XY: BUTTON=(%.3f, %.3f) CENTER=(%.3f, %.3f)" % (px, py, cx, cy))}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=Z_COMPARE_BUTTON_TO_CENTER VARIABLE=btn_z VALUE=0.0
    SET_GCODE_VARIABLE MACRO=Z_COMPARE_BUTTON_TO_CENTER VARIABLE=ctr_z VALUE=0.0

    {action_respond_info("Z_COMPARE_BUTTON_TO_CENTER: BUTTON=(%.3f, %.3f) CENTER=(%.3f, %.3f)" % (px, py, cx, cy))}
    M117 BTN({ "%.1f"|format(px) },{ "%.1f"|format(py) }) CTR({ "%.1f"|format(cx) },{ "%.1f"|format(cy) })

    G90
    G1 Z{zh} F{zs}

    # 1) Move over BUTTON, then slow Z down to probe
    G1 X{px} Y{py} F6000
    M400
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1
    G1 F{slowz}
    PROBE
    _ZCBC_SAVE_BTN
    SET_VELOCITY_LIMIT

    G1 Z{zh} F{zs}

    # 2) Move over CENTER, then slow Z down to probe
    G1 X{cx} Y{cy} F6000
    M400
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1
    G1 F{slowz}
    PROBE
    _ZCBC_SAVE_CTR
    SET_VELOCITY_LIMIT

    G1 Z{zh} F{zs}

    {% set btn = printer["gcode_macro Z_COMPARE_BUTTON_TO_CENTER"].btn_z|float %}
    {% set ctr = printer["gcode_macro Z_COMPARE_BUTTON_TO_CENTER"].ctr_z|float %}
    {% set delta = (ctr - btn)|float %}
    {action_respond_info("Button Z=%.5f  Center Z=%.5f  dZ=%.5f mm" % (btn, ctr, delta))}
    M117 dZ={ "%.3f"|format(delta) }mm

[gcode_macro _ZCBC_SAVE_BTN]
gcode:
    SET_GCODE_VARIABLE MACRO=Z_COMPARE_BUTTON_TO_CENTER VARIABLE=btn_z VALUE={printer.probe.last_z_result}

[gcode_macro _ZCBC_SAVE_CTR]
gcode:
    SET_GCODE_VARIABLE MACRO=Z_COMPARE_BUTTON_TO_CENTER VARIABLE=ctr_z VALUE={printer.probe.last_z_result}
